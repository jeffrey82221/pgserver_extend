name: Build and Test
on:
  push:
    branches:
      - testing
      - main
  release:
    types:
      - created
  workflow_dispatch:
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
            deployment-target: '11.0'
          - os: ubuntu-latest
            arch: x86_64
            deployment-target: ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        if: matrix.os != 'ubuntu-latest'
        with:
          python-version: '3.10'
      - uses: actions/setup-python@v4
        if: matrix.os == 'ubuntu-latest'
          # for testing due to docker env issues
        with:
          python-version: '3.11'
      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade cibuildwheel
      - name: Build postgres, pgvector, and age
        if: ${{ matrix.os != 'ubuntu-latest' }}
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment-target }}
        # this step is implied by Build wheels, but we do it here for caching before python tests run
        # on ubuntu, cibuildwheel will run this step within a docker container, so it cannot use the cache this way
        run: make
      - name: Save postgres build
        if: ${{ matrix.os != 'ubuntu-latest' }}
        id: cache-postgres
        uses: actions/cache/save@v3
        env:
          cache-name: cache-postgres
        with:
          path: |
           pgbuild
           src/pgserver/pginstall
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-${{
            hashFiles('Makefile', 'pgbuild/Makefile', '.github/workflows/build-and-test.yml') }}
      - name: Brew install postgresql
        if: ${{ matrix.os != 'ubuntu-latest' && matrix.os != 'windows-2022' }}
        run: |
          brew install postgresql
          export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"
          export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib -L${HOME}/.pyenv/versions/3.8.10/lib"
      - name: Install Flex
        if: ${{ matrix.os == 'ubuntu-latest'  }}
        run: |
          sudo apt-get install flex
      - name: Build wheels
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: pp* cp38-* *-musllinux*
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment-target }}
        run: |
          python -m pip install psycopg2-binary
          python -m cibuildwheel --output-dir wheelhouse
      - name: Save postgres build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: cache-postgres2
        uses: actions/cache/save@v3
        env:
          cache-name: cache-postgres
        with:
          path: |
           pgbuild
           src/pgserver/pginstall
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-${{
            hashFiles('Makefile', 'pgbuild/Makefile', '.github/workflows/build-and-test.yml') }}
      - uses: actions/upload-artifact@v4
        with:
          path: wheelhouse/*.whl
          name: python-package-distributions
          overwrite: true
  publish-to-pypi:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Publish Python dist to PyPI
    needs:
      - build_wheels
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pgserver-extend  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
        - name: Download all the dists
          uses: actions/download-artifact@v4
          with:
            name: python-package-distributions
            path: dist/
        - name: Publish distribution ðŸ“¦ to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
